name: Monitor End-of-Life Versions

on:
  schedule:
    - cron: "0 0 * * 1"  # Runs every Monday at midnight UTC
  workflow_dispatch:  # Allows manual runs

permissions:
  contents: write
  issues: write

jobs:
  check-eol:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure products.txt exists
        run: |
          if [ ! -f products.txt ]; then
            echo "ERROR: products.txt is missing! Please add it to the repo."
            exit 1
          fi
          cat products.txt
          echo "PRODUCTS=$(cat products.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Fetch and compare EOL data
        run: |
          mkdir -p eol_data
          CHANGES=false
          UPDATED_PRODUCTS=""

          for PRODUCT in $PRODUCTS; do
            echo "Checking EOL for: $PRODUCT"
            curl -s https://endoflife.date/api/$PRODUCT.json -o eol_data/$PRODUCT.json

            if [ -f eol_data/$PRODUCT-previous.json ]; then
              if ! diff -q eol_data/$PRODUCT-previous.json eol_data/$PRODUCT.json > /dev/null; then
                echo "EOL data changed for $PRODUCT!"
                echo "$PRODUCT" >> updated_products.txt
                CHANGES=true
              fi
            else
              echo "First run for $PRODUCT, saving data."
            fi
            cp eol_data/$PRODUCT.json eol_data/$PRODUCT-previous.json
          done

          echo "CHANGES=$CHANGES" >> $GITHUB_ENV

      - name: Commit and push changes (per product)
        if: env.CHANGES == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@users.noreply.github.com"

          while read -r PRODUCT; do
            if [ -n "$PRODUCT" ]; then
              git add eol_data/$PRODUCT.json eol_data/$PRODUCT-previous.json
              git commit -m "Updated EOL data for $PRODUCT"
              git push
            fi
          done < updated_products.txt

      - name: Create separate GitHub issues for each updated product
        if: env.CHANGES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const labelsToCheck = ["eol-tracking", "version-update"];
            const { owner, repo } = context.repo;

            // Fetch existing labels in the repo
            const existingLabels = await github.paginate(github.rest.issues.listLabelsForRepo, {
              owner,
              repo,
              per_page: 100
            });

            const existingLabelNames = existingLabels.map(label => label.name);

            // Create missing labels
            for (const label of labelsToCheck) {
              if (!existingLabelNames.includes(label)) {
                console.log(`Creating missing label: ${label}`);
                await github.rest.issues.createLabel({
                  owner,
                  repo,
                  name: label,
                  color: "ededed", // Light gray
                  description: `Automatically created label for ${label}`
                });
              }
            }

            // Now create issues per product update
            const fs = require('fs');
            const products = fs.readFileSync('updated_products.txt', 'utf8').split('\n').filter(Boolean);
            for (const product of products) {
              github.rest.issues.create({
                owner,
                repo,
                title: `EOL Update Detected: ${product}`,
                body: `A new end-of-life (EOL) update was detected for **${product}**. Please review the latest changes.\n\nðŸ“… **Check the latest data here:**\n\`\`\`json\n${fs.readFileSync(\`eol_data/${product}.json\`, 'utf8')}\n\`\`\``,
                labels: labelsToCheck
              });
            }
